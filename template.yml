AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Quicker API

Parameters:
  LambdaImageUri:
    Type: String
    Description: The URI of the Lambda Docker image

Globals:
  Function:
    Timeout: 10

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaDockerImage:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Timeout: 10
      PackageType: Image
      ImageUri: !Ref LambdaImageUri
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref MyApiGateway
            Path: /{proxy+}
            Method: ANY

  MyApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: "2.0"
        info:
          title: My API Gateway
        paths:
          "/{proxy+}":
            any:
              responses:
                '200':
                  description: OK
                  headers:
                    Access-Control-Allow-Origin:
                      type: string
                    Access-Control-Allow-Headers:
                      type: string
                    Access-Control-Allow-Methods:
                      type: string
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaDockerImage.Arn}/invocations
                responses:
                  '200':
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                      method.response.header.Access-Control-Allow-Headers: "'*'"
                      method.response.header.Access-Control-Allow-Methods: "'*'"
      EndpointConfiguration: REGIONAL
      Cors:
        AllowOrigin: "'*'"
        AllowHeaders: "'*'"
        AllowMethods: "'*'"
      MethodSettings:
        - ResourcePath: /*/ANY
          HttpMethod: ANY
          LoggingLevel: INFO
          DataTraceEnabled: true

  ApiGatewayExecutionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/apigateway/${MyApiGateway}/Prod
      RetentionInDays: 14
