AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Quicker API

Parameters:
  LambdaImageUri:
    Type: String
    Description: The URI of the Lambda Docker image
    Default: lambda-docker-image

Globals:
  Function:
    Timeout: 30

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  LambdaDockerImage:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      Timeout: 30
      PackageType: Image
      ImageUri: !Ref LambdaImageUri
      Role: !GetAtt LambdaExecutionRole.Arn
      Events:
        ApiRoot:
          Type: Api
          Properties:
            Path: /
            Method: ANY
        ApiGreedy:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
  MyApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      DefinitionBody:
        swagger: '2.0'
        info:
          title: !Ref AWS::StackName
        paths:
          /{proxy+}:
            x-amazon-apigateway-any-method:
              produces:
                - application/json
              responses: { }
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaDockerImage.Arn}/invocations
        x-amazon-apigateway-cors:
          allowOrigins:
            - "'*'"
          allowHeaders:
            - "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          allowMethods:
            - "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
